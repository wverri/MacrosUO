// ===========================================================================
// Nome do Script:  Mining - Living In Cave
// ================================================== 
// Recomendo 2 bags no banco, 1 para os minerios e 1 para repor picaretas. (ignorar no Nightmare)
// ================================================== 
// Versão 1.5
// Opção de recall.

//ATENÇÂO!!!
// Configurações Inicias
var minaX=2575, minaY=463, minaZ=(-1), casaX=2563, casaY=489, casaZ=(0), forjaX=2564, forjaY=490, forjaZ=(0), ressX=1063, ressY=1431, ressZ=(-90); 
var typeOres='0x19B9|0x19B8|0x19B7|0x19BA' , typeJoias='0x0F16|0x0E1F|0x0F26|0x14ED|0x3C2D|0x0F13|0x0F18|0x0F10|0x0F0F|0x0F11'; typeLingots='0x1BEF|0x1BF5|0x1BE3|0x1BE9';
var runaCave='2', runaHome='1'; // Numero da runa da casa/banco e da mina. (se usar recall/runebooks)
var pickaxe='0x0E85', hammer='0x0FB5'; // type da picareta e do martelo.
var bauBS='0x4000A90D'; //ID bau de ingots/ores
var bauJoias='0x40017A7B'; // ID bau de joias
var bauPic='0x40017A7B'; //ID bau picareta
var bauReg='0x40017A7B';//ID bau de reagents
var local=1; // 0 p/ casa fora da mina, 1 p/ banco proximo a mina e 2 para recall.
var onSmaltar=1; // 0 para guardar ores e 1 para guardar lingotes.
var SmaltarCave=0; //0 para usar forja na mina e 1 para usar em casa.
var hidd=0; // 0 = não fica em stealth, 1 = usa stealth.
var guard=0; // 0 = não chama guards, 1 = chama guards.
var maxWeight = 810 //Peso Maximo - (Valor definido)
// Verifica se quer usar a separação dos minérios antes de smaltar
var usarSeparacao = false; // Você pode mudar para false se quiser desativar temporariamente
// Fim das ConfiguraçõeMining 
//ATENÇÂO!!!

function Autostart(){
    Orion.Wait(1500);
    Orion.CharPrint(self, 906, 'Bom jogo!');
    Orion.Wait(100);
    Orion.Exec('StartMining', true);
	Orion.Wait(100);
	Orion.Exec('guards', true);
	Orion.Wait(100);
}

function guards(){
	if(guard==1){
		while(true){
			Orion.Say('Guards');
			Orion.Wait('5000');
		}
	}
}


function StartMining(){	
	Orion.AddObject('bauBS', bauBS);
	Orion.AddObject('bauPic', bauPic);
	Orion.AddObject('bauJoias', bauJoias);
	Orion.WalkTo(minaX, minaY, minaZ, 0, 1);
	
	while (true){
		CheckDead();
		CheckWeight();
		CheckPickaxe(1);
		if(Orion.ValidateTargetTileRelative('cave', 0, 0)) {
				if(Orion.HaveTarget())
					Orion.CancelWaitTarget();
		}else
			LocMov(1);
		while(!Player.Dead()){
			Move();
			CheckWeight();
			//CheckPickaxe(1);
			Cave();
		}
	}
}

function Hidd(){
	while(!Player.Hidden()){
		if(!Player.Hidden()){
	    	Move();
	        if(Player.WarMode(1))
				Orion.WarMode(0);
	        Orion.UseSkill('Hiding');
	        Orion.Wait(3000);
	    }
        if(Player.Hidden()){
	        Orion.UseSkill('Stealth');
	        Orion.Wait(3000);
	    }
  	}	
}

function Move(){
	Orion.WalkTo(Player.X()+Orion.Random(-3, 3), Player.Y()+Orion.Random(-3, 3),  Player.Z(), 0);
	if(hidd==1){
		if(Player.Hidden()){
		        Orion.UseSkill('Stealth');
		        Orion.Wait(3000);
		}
	}
}

function Cave(){
	for(var x=-1; x <= 1; x++){
		for(var y=-1; y <= 1; y++){
			CheckWeight();
			if(hidd==1)
	        	Hidd();
			if(Orion.ValidateTargetTileRelative('cave', x, y)) {
				if(Orion.HaveTarget())
					Orion.CancelWaitTarget();
            }//else
            //	Orion.WalkTo(minaX, minaY, minaZ, 0);
			Orion.ClearJournal();
			Orion.WaitTargetTileRelative('cave', x, y, Player.Z());      
			Orion.UseType(pickaxe);
			Orion.WaitJournal('Voce nao achou nada|Sua picareta|Isso está|foi morto|Você coloca|Você colocou|Você não|Tente minerar|You cannot|You are|cadáver|Você cava|Não há|You put|You loosen|There is|You have|Try mining', Orion.Now(), (Orion.Now() + 14000), 'my|sys')
			Orion.Wait(50);
		}
	}
}

function CheckWeight(){
	var weight=Player.Weight();
	if(weight >= maxWeight){
		if(onSmaltar==1) {			
			if (usarSeparacao) {
				// Usa a nova função que separa e depois smalta
				SepararESmaltar();
			} else {
				// Usa a função original de smaltar sem separar
				smaltar();
			}
		}
		
		if (local == 1){
			while((Player.X()!=casaX) && (Player.Y()!=casaY)){
				LocMov(0);
				Orion.Wait(2000);
			}
			 OpenBank();
		}else{
			while((Player.X()!=casaX) && (Player.Y()!=casaY)){
				if((Player.X()-casaX)>10){
					LocMov(0);
					Orion.Wait(2000);
				}else
					Orion.WalkTo(casaX, casaY, casaZ, 0, 0, 1, 1);
			}
			OpenBank();
			CheckReg();
		}
		Guardar();
		LocMov(1);
	}
}

function smaltar(){
	if(SmaltarCave==1)
		LocMov(0);
	Orion.WalkTo(forjaX, forjaY, forjaZ, 0, 0, 1, 1);
	while((Player.X()!=forjaX) && (Player.Y()!=forjaY)){
		Orion.WalkTo(forjaX, forjaY, forjaZ, 0, 0, 1, 1);
		Orion.Wait(1000);
	}
	while(Orion.Count(typeOres, 'any', backpack)>0){
		var ores = Orion.FindType(typeOres, 'any', backpack);
		for (var i=0; i <= ores.length; i++){
			Orion.UseObject(ores[i]);
			Orion.Wait(50);
		}
	}
}

function Guardar(){
	if(onSmaltar==0){
		while (Orion.Count(typeOres, 'any', backpack)>= 1){
			var finditem = Orion.FindType(typeOres, 'any', backpack);
			for(i = 0; i < finditem.length; i++) {
			     Orion.MoveItem(finditem[i], 0, Player.BankSerial());
			     Orion.Wait(500);
	        } 
	     	Orion.Wait(100);
	     }
	}else if(onSmaltar==1){
		while (Orion.Count(typeLingots, 'any', backpack)>= 1){
			var finditem = Orion.FindType(typeLingots, 'any', backpack);
			for(i = 0; i < finditem.length; i++) {
			     Orion.MoveItem(finditem[i], 0, Player.BankSerial());
			     Orion.Wait(500);
	        } 
	     	Orion.Wait(100);
	     }
	}else{
		Orion.CharPrint('self', '0x0035', 'Valor da variavel \"onSmaltar" não definida corretamente!');
	}
	while (Orion.Count(typeJoias, 'any', backpack)>= 1){
		var finditem = Orion.FindType(typeJoias, 'any', backpack);
		for(i = 0; i < finditem.length; i++) {
		     Orion.MoveItem(finditem[i], 0, 'bauJoias');
		     Orion.Wait(500);
        } 
     	Orion.Wait(100);
     }
     Orion.WalkTo(minaX, minaY, minaZ, 0, 1);
	//CheckPickaxe(1);
}

function OpenBank() {
	Orion.SetTimer('openBank');
	Orion.ClearJournal();
	var placa = Orion.FindType('0x0BD2', 'any', ground, 'fast ', 14);

	//if (placa.length) {
	//	Orion.UseObject(placa);
	//	Orion.WaitGump(Orion.CreateGumpHook(6));
	//} else {
		Orion.Say('bank')
//	}

	do {
		Orion.Wait(10);
	} while (!Orion.InJournal('Bank Box') && Orion.Timer('openBank') < 800 );

	Orion.Boxhack(Player.BankSerial());
}

	

function CheckPickaxe(x){
	var qnt = x;
	Orion.Disarm();
	Orion.Wait(100);
	var picks = Orion.FindType(pickaxe, 'any', backpack);
	if(picks.length < qnt){
		var x = (qnt - picks.length);
		LocMov(0);
		OpenBank();
		Orion.UseObject('bauPic');
		Orion.Wait(100);
		var picks = Orion.FindType(pickaxe, 'any', 'bauPic');
		for(var i=0; i<x; i++){
			Orion.MoveItem(picks[i], x, backpack);
			Orion.Wait(500);
		}
		LocMov(1);
	}
}


function CheckDead(){
	if(Player.Dead()){
		Orion.WalkTo(ressX, ressY, ressZ, 0, 0, 1, 1);
		Orion.WarMode('1');
		while(Player.Dead()){
			Orion.Say('Ress');
			Orion.Wait(4000)
			if(Player.Dead()){
				Orion.WalkTo(ressX, ressY, ressZ, 0, 0, 1, 1);
			}
		}
		Orion.WarMode('0');
	}
}

function CheckReg(){
	Orion.UseObject(bauReg);
	Orion.Wait(500);
	var regs = [
            {id: '0', name: 'Blood Moss', type: '0x0F7B', qtd: '20'},
            {id: '1', name: 'Black Pearls', type: '0x0F7A', qtd: '20'},
            {id: '2', name: 'Mandrake Roots', type: '0x0F86', qtd: '20'},
          ];

	for(var i=0; i<3; i++){
		if(Orion.Count(regs[i].type, 'any', 'backpack') < 20){
			Orion.DragItem(Orion.FindType(regs[i].type, 'any', bauReg), 20-Orion.Count(regs[i].type, 'any', 'backpack'));
			Orion.Wait('300');
			Orion.DropDraggedItem('backpack');
			Orion.Wait('500');			
		}
	}
}

function LocMov(x){
	if(x==0){
		if(local==0)
			Orion.WalkTo(casaX, casaY, casaZ, 0, 0, 1, 1);
		else if(local==1)
			Orion.WalkTo(casaX, casaY, casaZ, 0, 0, 1, 1);
		else if(local==2){
			while(Player.Mana()!=Player.MaxMana()){
				Orion.UseSkill('Meditation');
				Orion.WaitJournal('peace|Você perdeu', Orion.Now(), (Orion.Now()+2000));
			}
			Orion.Say('.recall ' + runaHome);
			Orion.Wait(7500);
			Orion.UseType(pickaxe);
			Orion.CancelTarget();
			Orion.WalkTo(casaX, casaY, casaZ, 0, 0, 1, 1);
		}else
			Orion.CharPrint('self', '0x0035', 'Valor da variavel \"local" não definida corretamente!');
	}else{
		if(local==0)
			Orion.WalkTo(minaX, minaY, minaZ, 0);
		else if(local==1)
			Orion.WalkTo(minaX, minaY, minaZ, 0);
		else if(local==2){
			while(Player.Mana()!=Player.MaxMana()){
				Orion.UseSkill('Meditation');
				Orion.WaitJournal('peace|Você perdeu', Orion.Now(), (Orion.Now()+2000));
			}
			Orion.Say('.recall ' + runaCave);
			Orion.Wait(7500);
			Orion.UseType(pickaxe);
			Orion.CancelTarget();
			Orion.WalkTo(minaX, minaY, minaZ, 0);
		}else
			Orion.CharPrint('self', '0x0035', 'Valor da variavel \"local" não definida corretamente!');
	}
}


function SepararESmaltar() {
    // Array com os tipos de minérios (baseado na variável typeOres do script existente)
    var tiposDeOres = ['0x19B9', '0x19B8', '0x19B7', '0x19BA'];
    var maiorQuantidade = 0;
    var tipoComMaior = '';
    
    // Verifica qual tipo de minério tem a maior quantidade
    for (var i = 0; i < tiposDeOres.length; i++) {
        var tipo = tiposDeOres[i];
        var quantidade = Orion.Count(tipo, 'any', 'backpack');
        
        if (quantidade > maiorQuantidade) {
            maiorQuantidade = quantidade;
            tipoComMaior = tipo;
        }
    }
    
    // Se não encontrou nenhum minério, avisa o jogador
    if (maiorQuantidade <= 0) {
        Orion.CharPrint('self', 33, 'Não encontrei nenhum minério na sua mochila!');
        return;
    }
    
    Orion.CharPrint('self', 66, 'Encontrei ' + maiorQuantidade + ' unidades do minério tipo ' + tipoComMaior);
    Orion.CharPrint('self', 66, 'Vou separar em montes individuais...');
    
    // Continua separando enquanto houver pilhas com mais de 1 item
    while (true) {
        // Encontra a primeira pilha com mais de 1 item
        var pilhas = Orion.FindType(tipoComMaior, 'any', 'backpack');
        if (pilhas.length === 0) break;
        
        var pilhaAtual = pilhas[0];
        
        // Arrasta 1 item da pilha
        Orion.DragItem(pilhaAtual, 1);
        Orion.Wait(500);
        
        // Solta na mochila em posição aleatória
        Orion.DropDraggedItem('backpack', Orion.Random(50, 150), Orion.Random(50, 150));
        Orion.Wait(500);
        
        // Verifica se ainda há minérios para separar
        if (Orion.Count(tipoComMaior, 'any', 'backpack') <= pilhas.length) {
            break; // Todas as pilhas já têm apenas 1 item
        }
    }
    
    Orion.CharPrint('self', 68, 'Separação de minérios concluída!');
    
    // Verificação extra para garantir que todos os minérios estão em montes de 1
    var todosOres = '0x19B9|0x19B8|0x19B7|0x19BA';
    var pilhasRestantes = Orion.FindType(todosOres, 'any', 'backpack');
    var temPilhaGrande = false;
    
    for (var i = 0; i < pilhasRestantes.length; i++) {
        var pilhaAtual = pilhasRestantes[i];
        if (Orion.Count(todosOres, pilhaAtual, 'backpack') > 1) {
            temPilhaGrande = true;
            Orion.CharPrint('self', 33, 'Ainda existem montes com mais de 1 minério! Separando...');
            break;
        }
    }
    
    // Se encontrou alguma pilha grande, separa novamente
    if (temPilhaGrande) {
        while (true) {
            var pilhasGrandes = [];
            pilhasRestantes = Orion.FindType(todosOres, 'any', 'backpack');
            
            // Verifica se há pilhas com mais de 1 item
            for (var i = 0; i < pilhasRestantes.length; i++) {
                if (Orion.Count(todosOres, pilhasRestantes[i], 'backpack') > 1) {
                    pilhasGrandes.push(pilhasRestantes[i]);
                }
            }
            
            if (pilhasGrandes.length === 0) break;
            
            // Divide a primeira pilha grande encontrada
            Orion.DragItem(pilhasGrandes[0], 1);
            Orion.Wait(500);
            Orion.DropDraggedItem('backpack', Orion.Random(50, 150), Orion.Random(50, 150));
            Orion.Wait(500);
        }
        
        Orion.CharPrint('self', 68, 'Separação adicional concluída!');
    }
    
    // Agora vamos smaltar todos os minérios
    Orion.CharPrint('self', 66, 'Iniciando fundição dos minérios...');
    SmaltarTodos();
}

function SmaltarTodos() {
    
    Orion.WalkTo(forjaX, forjaY, forjaZ, 0, 0, 1, 1);
    while((Player.X()!=forjaX) && (Player.Y()!=forjaY)){
        Orion.WalkTo(forjaX, forjaY, forjaZ, 0, 0, 1, 1);
        Orion.Wait(1000);
    }
    
    // Define a variável typeOres caso não esteja acessível
    var oresParaSmaltar = '0x19B9|0x19B8|0x19B7|0x19BA';
    
    // Conta quantos minérios temos para fundir
    var totalOres = Orion.Count(oresParaSmaltar, 'any', 'backpack');
    if (totalOres > 0) {
        Orion.CharPrint('self', 66, 'Fundindo ' + totalOres + ' minérios...');
    } else {
        Orion.CharPrint('self', 33, 'Não há minérios para fundir!');
        return;
    }
    
    // Usa cada minério individualmente na forja
    while(Orion.Count(oresParaSmaltar, 'any', 'backpack')>0){
        var ores = Orion.FindType(oresParaSmaltar, 'any', 'backpack');
        for (var i=0; i < ores.length; i++){
            Orion.UseObject(ores[i]);
            Orion.Wait(100); // Espera um pouco mais entre cada fundição
        }
    }
    
    Orion.CharPrint('self', 68, 'Fundição concluída!');
}